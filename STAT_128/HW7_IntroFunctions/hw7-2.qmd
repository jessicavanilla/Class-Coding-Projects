---
title: "hw7"
author: "Jessica Villanueva"
format: 
  html:
    self-contained: true
editor: visual
---

```{r}
# install.packages('hablar')
library(tidyverse)
library(hablar)
```

## 1. vocabulary

### 1.1

Call `sample` to select five random lowercase letters. Hint: use `letters`.

```{r}
sample(letters, size = 5)
```

### 1.2

What are the parameters in the `sample` function from the `base` package? Which have default arguments?

The `sample` function can take 6 arguments; x, n, size, replace, prob, and useHash. Replace and prob have default values to FALSE and NULL respectively.

### 1.3

What is the role of `...` as described in the documentation for `paste`? Note we read `...` as "dot-dot-dot". Provide an example demonstrating how it works.

```{r}
paste(sample(letters, size = 1), "is a random generated letter.")

concat <- function(...){
  args <- list(...)
  x = do.call(c, args)
  paste(x)
}

concat(1:3, "hi", " bye ", " :P")
```

The role of `...` is used to represent one or more R objects, such as a character string or a data frame, to be converted into character vectors.

### 1.4

Identify the following in the code below.

function, parameter, argument, function call, body, return value

```{r}
greet <- function(name, ending = "."){
  lastpart <- paste0(name, ending)
  paste("Hello", lastpart)
}

greet("students")
```

Function: greet

Parameter: name, ending

Argument: "students"

Call: greet("students")

Body: lastpart \<- paste0(name, ending)

Return value: paste("Hello", lastpart)

## 2

Turn each of the following code snippets into functions.

-   give them descriptive names
-   use an appropriate number of parameters
-   call them on some simple example data to verify that they work

### 2.1

```{r}
x <- runif(20)
x[sample.int(20, size=5)] <- NA
y <- runif(30)
y[sample.int(30, size=8)] <- NA
z <- runif(20)
z[sample.int(20, size=17)] <- NA
```

```{r}
# function
naValue <- function(name, sample, naNum){
  name <- runif(sample)
  name[sample.int(sample, size = naNum)] <- NA
  name
}
# parameters: name of vector, size of distribution, number of NA values
naValue(a, 20, 5)
naValue(b, 30, 8)
naValue(c, 20, 17)
```

### 2.2

```{r}
mean(is.na(x))
mean(is.na(y))
mean(is.na(z))
```

```{r}
# function: return proportion of NA values
meanNa <- function(x){
  mean(is.na(x))
}
# parameters: a vector
# return: the proportion of NA values in the vector
x <- c(NA, NA, 1, 2, 3)
y <- c(NA, 9, 8, NA, NA)
z <- c(NA, 6, 5, 7, 2)
meanNa(x)
meanNa(y)
meanNa(z)
```

### 2.3

```{r}
x / sum(x, na.rm = TRUE)
y / sum(y, na.rm = TRUE)
z / sum(z, na.rm = TRUE)
```

```{r}
# function: divide a value by the total sum of its vector
divide <- function(x){
  x / sum(x, na.rm = TRUE)
}
# parameters: the integer vector
# return: the result of the calculation as a vector
divide(c(1, 2, 3, NA, 4))
divide(c(10, 20, NA, 4))
divide(c(5, 10, 2, NA, 8))
```

### 2.4

```{r}
round(x / sum(x, na.rm = TRUE) * 100, 1)
round(y / sum(y, na.rm = TRUE) * 100, 1)
round(z / sum(z, na.rm = TRUE) * 100, 1)
```

```{r}
# function: turn into a percentage
percent <- function(x){
  round(x / sum(x, na.rm = TRUE) * 100, 1)
}
# parameters: integer vector 
# result: percent rounded to nearest tenth
percent(c(1, 2, 3, NA, 4))
percent(c(10, 20, NA, 4))
percent(c(5, 10, 2, NA, 8))
```

## 3

Given a vector of birthdates, write a function to compute the age in years, and demonstrate that it works on `bd` below.

```{r}
bd <- as.Date(c("2020-01-01", "1950-06-01"))

age <- function(x){
  for(i in 1:length(x)){
    years <- as.numeric((Sys.Date() - x[i]) / 365)
    print(paste(floor(years), "years"))
  }
}

age(bd)
```

## 4

```{r}
rescale01 <- function(x) {
  rng <- range(x, na.rm = TRUE, finite = TRUE)
  (x - rng[1]) / (rng[2] - rng[1])
}

# testing function
x <- c(1:10, Inf, -Inf)
rescale01(x)
```

In the above variant of `rescale01()`, infinite values are left unchanged. Rewrite it so that -Inf is mapped to 0, and Inf is mapped to 1.

```{r}
rescale01_2 <- function(x) {
  x[x == -Inf] <- min(s(x))
  x[x == Inf] <- max(s(x))
  
  rng <- range(x, na.rm = TRUE, finite = TRUE)
  x_2 <- (x - rng[1]) / (rng[2] - rng[1])
  
  return(x_2)
}

# testing the function
x <- c(1:10, Inf, -Inf)
rescale01_2(x)
```

## 5

Write your own functions to compute the variance and skewness of a numeric vector. You can look up the definitions on Wikipedia or elsewhere.

```{r}
# variance
var <- function(x){
  y <- sum((x - mean(x))^2)
  y/(length(x) - 1)
}

#skewness
skew <- function(x){
  (3 * (mean(x) - median(x)))/sqrt(var(x))
}

# testing functions
x <- c(1:10)
var(x)
skew(x) # x is perfectly symmetric
```

## 6

Write `both_na()`, a summary function that takes two vectors of the same length and returns the number of positions that have an NA in both vectors.

```{r}
both_na <- function(x, y){
  count = 0
  for(i in 1:length(x)){
    if(is.na(x[i]) | is.na(y[i])){
      count = count + 1
    } else if (is.na(x[i]) & is.na(y[i])){
      count = count + 2
    }
  }
  return(count)
}

# testing function
x <- c(1:3, NA, 5, 6:8, NA, NA)
y <- c(NA, 2:5, NA, 7:9, NA)

both_na(x, y)
```

## 7

Read the documentation to figure out what the following functions do. Why are they useful even though they are so short?

```{r}
is_directory <- function(x) {
  file.info(x)$isdir
}
is_readable <- function(x) {
  file.access(x, 4) == 0
}
```

`is_directory` checks if the file passed into the function is a directory. `is_readable` checks if the file passed into the function has read permissions on for the user. These functions are useful because they abstract the R programmer from needing to know the implementation of the underlying functions. The wrapper functions have the purpose of the function built into the name, so it's easy to use and know what it's for.

## 8 Optional

This is an ungraded, optional question for those who want to master R. I'm happy to talk through it in office hours.

Explain R's *lazy evaluation* of arguments in your own words and provide an example.

```{r}
# example
test <- function(x){
  print("R will not evaluate this argument")
}

test(10)

# example 2
test2 <- function(x){
  print("This prints because the argument is evaluated after the print statement")
  return(x)
}

test2(12)

#example 3
test3 <- function(x){
  print(x)
  print("This prints after the argument")
  return(x)
}

test3(1)
```

R does not recognize (or read) arguments passed into functions until it is called or mentioned in the body of the function. If the argument is not in the body of the function, R will not read it at all. This makes R more efficient and reduces the computational power needed for R to run.
