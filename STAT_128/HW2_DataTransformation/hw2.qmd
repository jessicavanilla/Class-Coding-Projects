---
title: "HW2 - Data Transformation" 
author: "Jessica Villanueva"
format:   
  html: 
    self-contained: true 
editor: visual
---

```{r}
library(tidyverse)
library(nycflights13)
```

------------------------------------------------------------------------

# Question 1

------------------------------------------------------------------------

## 1) Tweak the following R command so it runs.

```         
libary(todyverse)
ggplot(dTA = mpg) + 
geom_point(maping = aes(x = displ y = hwy)) +
geom_smooth(method = "lm)
```

```{r}
library(tidyverse)
ggplot(
  data = mpg,
  mapping = aes(x = displ, y = hwy)
  ) + 
geom_point() +
geom_smooth(method = "lm")
```

------------------------------------------------------------------------

# Question 2

------------------------------------------------------------------------

### The following questions refer to the `flights`data frame in `nycflights13`package.

### 2.1) In a single pipeline for each condition, find all flights that meet the condition:

#### Had an arrival delay of two or more hours

```{r}
flights |> filter(arr_delay >= 120)
```

#### Flew to Houston (`IAH` or `HOU`)

```{r}
flights |> filter(dest == "IAH" | dest == "HOU")
```

#### Were operated by United, American, or Delta

```{r}
flights |> filter(carrier == "UA" | carrier == "AA" | carrier == "DL")
```

#### Departed in summer (July, August, and September)

```{r}
flights |> filter(month == 7 | month == 8 | month == 9)
```

#### Arrived more than two hours late, but didn't leave late

```{r}
flights |> filter(arr_delay > 120 & dep_delay < 0)
```

#### Were delayed by at least an hour, but made up over 30 minutes in flight

```{r}
flights |> filter (dep_delay >= 60 & air_time > 30)
```

### 2.2) Sort `flights` to find the flights with longest departure delays. Find the flights that left earliest in the morning.

```{r}
# ????? I'm not entirely sure what this question is asking
flights |> filter(dep_time < 1200) |> arrange(desc(dep_delay), dep_time) 

# flights with the longest departure delays
arrange(flights, desc(dep_delay))

# flights that left earliest in the morning (displays all flights from morning until afternoon)
filter(flights, dep_time < 1200) |>
arrange(dep_time)
```

### 2.3) Sort `flights` to find the fastest flights. (Hint: Try including a math calculation inside of your function.)

```{r}
mutate(flights, speed = distance / (air_time / 60), .before = 1) |> 
  arrange(desc(speed))
```

### 2.4) Was there a flight on every day of 2013?

```{r}
flights |>
  group_by(month, day) |>
  summarize(count = n())
```

Yes, there was a flight everyday of 2013 because when you group by month and then day, you effectively see all the days of the year. This tibble has 365 rows, which represents everyday of the year. Since there is a value for everyday in the count column, that means there was at least 1 flight in/out of NYC that particular day in 2013.

### 2.5) Which flights traveled the farthest distance? Which traveled the least distance?

```{r}
# flights that traveled the least distance
select(flights, year:day, carrier, flight, air_time, distance) |> 
  arrange(distance, air_time)

select(flights, year:day, carrier, flight, air_time, distance) |> 
  slice_min(distance, n = 1)

# flights that traveled the farthest distance
select(flights, year:day, carrier, flight, air_time, distance) |>
  arrange(desc(distance), desc(air_time))

select(flights, year:day, carrier, flight, air_time, distance) |> 
  slice_max(distance, n = 1) |>
  arrange(desc(air_time))
```

### 2.6) Does it matter what order you used `filter()`and `arrange()`if you're using both? Why/why not? Think about the results and how much work the functions would have to do.

Filter reduces the amount of rows a data set has, so if you call filter first before arrange, arrange has less work to do. If arrange gets called first before filter, arrange sorts the entire data set, even the rows that are not needed, and thus wastes time and/or resources. It is more efficient to filter first, then arrange if you're using both function calls.

### 2.7) What happens if you specify the name of the same variable multiple times in a `select()` call?

```{r}
# experiment
select(flights, year, year, year)

select(flights, year, year, day, day)

select(flights, year, day, year, day)
```

In my experiments, I found that a select() call ignores multiple references to the same variable, no matter the order or how many times you references the same variable. It shows only distinct columns.

### 2.8) Rename `air_time` to `air_time_min` to indicate units of measurement and move it to the beginning of the data frame.

```{r}
rename(flights, air_time_min = air_time) |>
  relocate(air_time_min, .before = 1)
```

------------------------------------------------------------------------

# **Question 3**

------------------------------------------------------------------------

### 3.1) Which carrier has the worst average delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about `flights |> group_by(carrier, dest) |> summarize(n())`)

```{r}
# I'm also confused with how to approach this, but I'll try my best:

# carriers with the longest avg total delay
group_by(flights, carrier) |>
  summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE), 
            avg_arr_delay = mean(arr_delay, na.rm = TRUE)) |>
  mutate(avg_total_delay = (avg_dep_delay + avg_arr_delay) / 2) |>
  arrange(desc(avg_total_delay))

# destination airports with the longest avg total delay
group_by(flights, dest) |>
  summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE), 
            avg_arr_delay = mean(arr_delay, na.rm = TRUE)) |>
  mutate(avg_total_delay = (avg_dep_delay + avg_arr_delay) / 2) |>
  arrange(desc(avg_total_delay))

# carriers, grouped by destination, with the longest avg total delay
group_by(flights, carrier, dest) |>
  summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE), 
            avg_arr_delay = mean(arr_delay, na.rm = TRUE)) |>
  mutate(avg_total_delay = (avg_dep_delay + avg_arr_delay) / 2) |>
  arrange(desc(avg_total_delay))
```

From the first tibble, we can conclude that carrier F9 has the longest delays, on average (considering both arrival and departure delays). F9 also has the greatest average departure and arrival delays individually, compared to the rest of the carriers.

Yes, you can disentangle the effects of bad carriers vs. bad airports. If you compare all three dataframes, the first one showing the average total delay of carriers, the second showing the average total delay of airports, and the third showing the average total delay of each carrier dependent on the destination airport.

For example, in the third tibble we can see that carrier EV shows up frequently in the first 20 rows (about 55%). This indicates that the long departure delays are a result of the carrier rather than the airport. Furthermore, in the second tibble, the airport CAE has the longest average total delay. However if we cross reference it with the third tibble, it only appears once in the first 20 rows–associated with the carrier EV. This may indicate that CAE's high times in the second tibble are a result of outliers caused by the carrier EV, who has a history of delayed departure and arrival times, and not because the airport itself often has delays.

### 3.2) Find the flights that are most delayed upon departure from each destination.

```{r}
group_by(flights, dest) |>
  slice_max(dep_delay, n = 1) |>
  relocate(dest, dep_delay)
```

### 3.3) How do delays vary over the course of the day. Illustrate your answer with a plot.

```{r}
# average length (in minutes) of departure delay per hour of the day 
group_by(flights, hour) |>
  summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) |>
  ggplot(
    mapping = aes(x = hour, y = avg_dep_delay)
  ) +
  geom_line() +
  labs(
    x = "Hour of Day", y = "Average Departure Delay (min)"
  )

# number of flights that are delayed over the course of the day
group_by(flights, hour) |>
  filter(dep_delay > 0) |>
  summarize(count = n()) |>
  ggplot(
    mapping = aes(x = hour, y = count)
  ) +
  geom_line() +
  labs(
    x = "Hour of Day", y = "Number of Flights Delayed"
  )
```

In the first plot, we can see that as the day progresses, on average, the departure delay increases linearly and peaks around 7:00 PM and 9:00 PM. These times are when you can expect the longest delay in minutes. After 9:00 PM, the length of delay sharply declines.

The second plot illustrates the number of flights that are delayed throughout the course of the day. We can see here that most flights that are delayed depart between 2:00 PM and 8:00 PM. Flights after 9:00 PM have a significantly less chance of being delayed, but that might also be attributed to the number of total flights that leave during that time (the number of total flights is significantly less than in the afternoon).

### 3.4) What happens if you supply a negative `n` to [`slice_min()`](https://dplyr.tidyverse.org/reference/slice.html) and friends?

```{r}
select(flights, year:day, carrier, flight, air_time, distance)

select(flights, year:day, carrier, flight, air_time, distance) |> 
  slice_head(n = 5)

select(flights, year:day, carrier, flight, air_time, distance) |> 
  slice_head(n = -5)
```

When supplying the slice family of functions with a negative number, it subtracts that number from the total amount of rows. So, if there were 336,766 rows and you supply slice_head() with n = -5, then the resulting tibble will have 336,761 rows. As opposed to passing in n = 5, which returns 5 rows.

### 3.5) Explain what `count()` does in terms of the dplyr verbs you just learned. What does the `sort` argument to [`count()`](https://dplyr.tidyverse.org/reference/count.html) do?

Count() tallies the distinct values of a specified data frame, given variables to group by. The sort argument can be assigned a Boolean value, and if true, lists the largest groups/values at the top of the data frame.

------------------------------------------------------------------------

# Question 5

------------------------------------------------------------------------

### Come up with and answer your own question regarding flights. Answer it using a pipeline with at least 3 steps.

What day of each month has the most flights leaving NYC? What time is the busiest?

```{r}
# finding the days of each month with the highest number of flights
group_by(flights, month, day) |>
  summarize(count = n()) |>
  slice_max(count) |>
  arrange(desc(count))


# if we take the day with the most departures, we can find the 
# busiest time to catch a flight out of NYC in 2013
filter(flights, month == 11, day == 27) |>
  group_by(hour) |>
  summarize(count = n()) |>
  arrange(desc(count))

# plotting the data:
filter(flights, month == 11, day == 27) |>
  group_by(hour) |>
  summarize(count = n()) |>
  arrange(desc(count)) |>
  ggplot(
    mapping = aes(x = hour, y = count)
  ) + 
  geom_line()
```

The first data frame lists all the days of each month that had the most flights leaving NYC in 2013. It sorted it based on number of flights, so we were able to find that November 27th, 2013 was the day that had the most flights depart from NYC.

In the second data frame, it takes all the flights leaving NYC on November 27th and sorts it by hour according to how many flights departed during that time. Here, we can see that November 27th, 2013 from 6-8 A.M. was the busiest time to catch a flight out of NYC.

In the plot, we can visually see the number of departing flights on Nov. 27th throughout the day. After 8:00 PM, we can observe a sharp decline in departing flights.
