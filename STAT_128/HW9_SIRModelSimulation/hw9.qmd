---
title: "hw9"
author: "Jessica Villanueva"
format: 
  html:
    self-contained: true
editor: visual
---

```{r}
library(tidyverse)
```

## 1

Write a function to create a matrix with 1's (infections) in all 4 corners, and 0's everywhere else. The number of rows and number of columns should have default arguments set to 20 and 30.

```{r}
infectCorners <- function(nrow = 20, ncol = 30){
  X <- matrix(0, nrow, ncol)
  X[1, 1] <- 1
  X[1, ncol] <- 1
  X[nrow, 1] <- 1
  X[nrow, ncol] <- 1
  X
}

# helper plotting function
plotMatrix <- function(X, title = "Infection"){
  if (all(X == 2)){
    newX <- apply(X, 2, rev)
    image(t(newX), col = c("gray"), axes = FALSE, asp = 1)
    title(main = title) 
  } else if (any(X == 2)){
    newX <- apply(X, 2, rev)
    image(t(newX), col = c("white", "red", "gray"), axes = FALSE, asp = 1)
    title(main = title) 
  } else {
    newX <- apply(X, 2, rev)
    image(t(newX), col = c("white", "red"), axes = FALSE, asp = 1)
    title(main = title)
  }
}

# testing the function with a plot
plotMatrix(infectCorners(30, 30), "Initial Infection")
```

## 2

Write a function `simulate_sir` that accepts a probability of infection and an SIR matrix containing 0's, 1's, and 2's, representing Susceptible, Infected, and Removed. `simulate_sir` should iterate the model until no more cells are infected, and return a list containing the following:

-   number of iterations until no more cells were infected

-   probability of infection (same as the argument)

-   proportion of cells ultimately infected

-   final SIR matrix

```{r}
# helper function
# infecting in one time step, returns a matrix of the infection
infection_step <- function(X, prob){
  # infecting upwards (above)   -------------------------------------------------------
  # boolean matrix of those who have had close contact with the cell above
  cc_above <- sample(c(TRUE, FALSE), prob = c(prob, 1 - prob), 
                     size = (nrow(X) - 1) * ncol(X), replace = TRUE)
  cc_above <- matrix(cc_above, nrow = nrow(X) - 1, ncol = ncol(X))
  # boolean matrix of a cell that had close contact with an **infected** cell
  new_infection_above <- X[-1, ] == 1 & cc_above
  # applying the new infected cells to the original matrix
  Xabove <- X
  Xabove[-nrow(X) , ][new_infection_above] <- 1
  
  
  # infecting downwards (below) -------------------------------------------------------
  cc_below <- sample(c(TRUE, FALSE), prob = c(prob, 1 - prob), 
                     size = (nrow(X) - 1) * ncol(X), replace = TRUE)
  cc_below <- matrix(cc_below, nrow = nrow(X) - 1, ncol = ncol(X))
  new_infection_below <- X[-nrow(X), ] == 1 & cc_below
  Xbelow <- X
  Xbelow[-1 , ][new_infection_below] <- 1
  
  # infecting to the right      -------------------------------------------------------
  cc_right <- sample(c(TRUE, FALSE), prob = c(prob, 1 - prob), 
                     size = nrow(X) * (ncol(X) - 1), replace = TRUE)
  cc_right <- matrix(cc_right, nrow = nrow(X), ncol = ncol(X) - 1)
  new_infection_right <- X[ , -ncol(X)] == 1 & cc_right
  Xright <- X
  Xright[ , -1][new_infection_right] <- 1
  
  # infecting to the left       -------------------------------------------------------
  cc_left <- sample(c(TRUE, FALSE), prob = c(prob, 1 - prob), 
                     size = nrow(X) * (ncol(X) - 1), replace = TRUE)
  cc_left <- matrix(cc_left, nrow = nrow(X), ncol = ncol(X) - 1)
  new_infection_left <- X[ , -1] == 1 & cc_left
  Xleft <- X
  Xleft[ , -ncol(X)][new_infection_left] <- 1
  
  # infecting northeast         -------------------------------------------------------
  cc_northeast <- sample(c(TRUE, FALSE), prob = c(prob, 1 - prob), 
                   size = (nrow(X) - 1) * (ncol(X) - 1), replace = TRUE)
  cc_northeast <- matrix(cc_northeast, nrow = nrow(X) - 1, ncol = ncol(X) - 1)
  new_infection_northeast <- X[-1, -ncol(X)] == 1 & cc_northeast
  Xnortheast <- X
  Xnortheast[-nrow(X) , -1][new_infection_northeast] <- 1
  
  # infecting southeast         -------------------------------------------------------
  cc_southeast <- sample(c(TRUE, FALSE), prob = c(prob, 1 - prob), 
                   size = (nrow(X) - 1) * (ncol(X) - 1), replace = TRUE)
  cc_southeast <- matrix(cc_southeast, nrow = nrow(X) - 1, ncol = ncol(X) - 1)
  new_infection_southeast <- X[-nrow(X), -ncol(X)] == 1 & cc_southeast
  Xsoutheast <- X
  Xsoutheast[-1 , -1][new_infection_southeast] <- 1  
  
  # infecting northwest         -------------------------------------------------------
  cc_northwest <- sample(c(TRUE, FALSE), prob = c(prob, 1 - prob), 
                   size = (nrow(X) - 1) * (ncol(X) - 1), replace = TRUE)
  cc_northwest <- matrix(cc_northwest, nrow = nrow(X) - 1, ncol = ncol(X) - 1)
  new_infection_northwest <- X[-1, -1] == 1 & cc_northwest
  Xnorthwest <- X
  Xnorthwest[-nrow(X) , -ncol(X)][new_infection_northwest] <- 1  
  
  # infecting southwest         -------------------------------------------------------
  cc_southwest <- sample(c(TRUE, FALSE), prob = c(prob, 1 - prob), 
                   size = (nrow(X) - 1) * (ncol(X) - 1), replace = TRUE)
  cc_southwest <- matrix(cc_southwest, nrow = nrow(X) - 1, ncol = ncol(X) - 1)
  new_infection_southwest <- X[-nrow(X), -1] == 1 & cc_southwest
  Xsouthwest <- X
  Xsouthwest[-1 , -ncol(X)][new_infection_southwest] <- 1    
  
  # combine all matrices by addition
  directions <- list(Xbelow, Xabove, Xright, Xleft, 
                     Xnortheast, Xsoutheast, Xnorthwest, Xsouthwest)
  newX <- 0
  for(direction in directions){
    newX <- newX + direction
  }
  newX[newX > 2] <- 2
  newX
}

# main function, handles loop logic, returns requirements
simulate_sir <- function(prob = 0.125, X){
  count = 0
  while(any(X == 1)){
    X <- infection_step(X, prob)
    count <- count + 1
  }
  
  # calculate proportion of cells infected
  prop <- mean(X == 2)
  
  # create a list with the return elements
  returnList <- list(iterationNumber = count, 
                     probability = prob, proportion = prop, matrix = X)
  returnList
}

# running simulation
simulation <- simulate_sir(0.5, infectCorners(10, 10))
simulation

#plot simulation
plotMatrix(simulation[['matrix']])
```

## 3

Starting with a 20 x 30 corner infected matrix, simulate from the above function at least 1000 times, and summarize all the resulting SIR matrices with one visualization. Which cells are most/least likely to be infected?

It should take around 10 seconds for all of these simulations to run.

```{r}
results <- replicate(1000, simulate_sir(0.25, infectCorners(20, 30)), simplify = FALSE)

sx <- 0
for(result in results){
  sx <- sx + result[["matrix"]]
}

image(sx, axes = FALSE, asp = 1)
box()
```

Running the simulation 1000 times with a probability of a susceptible cell who has come in contact with an infected cell to become infected at 0.25, the resulting matrix looks like this. Since we start the simulation in the corners every iteration, they are the darkest in color (indicating they were infected most often). As you begin to spread around the corners, the shades get lighter and lighter (indicating they were infected not as often). The cells least likely to get infected are in the middle, because they are furthers from any of the corners.

## 4

(Intentionally open ended)

Simulate using `simulate_sir` at least 1000 times while varying the probability of infection and create a data frame with one row for every simulation, containing at least the following columns:

-   number of iterations until no more cells were infected

-   probability of infection

-   proportion of cells ultimately infected

How do these variables appear to be related? Visualize the relationship between them.

```{r}
# I'm not sure if it's a problem that this takes like 30-40 seconds to run but...
prob_infect <- seq(from = 0.1, to = 0.9, by = 0.0005)

results <- lapply(prob_infect, simulate_sir, infectCorners(50, 50))

matrices <- lapply(results, `[[`, "matrix")

results2 <- data.frame(
  iter = sapply(results, `[[`, "iterationNumber"),
  prob = sapply(results, `[[`, "probability"),
  prop = sapply(results, `[[`, "proportion")
)
```

```{r}
results2 |>
  ggplot(aes(x = prob, y = iter)) +
  geom_point(aes(color = prop)) +
  labs(title = "SIR Simulations", x = "Probability of Infection", 
       y = "Number of Iterations", color = "Proportion of Infected")

```

Here we can see a visualization about 1800 SIR simulations done on a 50 x 50 matrix where the infection started in the corners and spread from there. Each simulation represents a different probability of infection.

We can see that there's a spike in the number of iterations it takes before there are no more active infections occurring. This happens at around 0.26 probability, which indicates the 0.26 Â±0.01 is the probability that maximizes the number of iterations for a simulation. After the spike, the number of iterations seem to have the pattern of decreasing exponentially as the probability increases.

We can also observe that there seems to be a rift in the number of iterations for simulations that have a high proportion of infected cells. This rift gets more distinct as the matrix increases in size (this was tested off of the .html document because simulations take a long time to run for bigger matrices).
